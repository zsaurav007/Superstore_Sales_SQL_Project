CREATE DATABASE SUPERSTORE;

USE SUPERSTORE;

SELECT
	*
FROM SUPERSTORE_SALES
LIMIT 10;

-- CHANGE COLUMN NAMES FOR CONVINIENCE
ALTER TABLE SUPERSTORE_SALES  
CHANGE COLUMN `Row ID` RowID INT;

ALTER TABLE SUPERSTORE_SALES  
CHANGE COLUMN `Unit Price` UnitPrice DOUBLE,
CHANGE COLUMN `Shipping Cost` ShippingCost DOUBLE,
CHANGE COLUMN `Customer ID` CustomerID TEXT,
CHANGE COLUMN `Product Base Margin` ProductBaseMargin DOUBLE,
CHANGE COLUMN `Order Date` OrderDate TEXT,
CHANGE COLUMN `Ship Date` ShipDate TEXT,
CHANGE COLUMN `Order ID` OrderID TEXT;


-- TOTAL 9426 ROWS
SELECT 
	COUNT(*) 
FROM SUPERSTORE_SALES;

-- DATES ARE IN EXEL DATE FORMAT 
SELECT DATE_ADD('1899-12-30', INTERVAL ORDERDATE DAY) AS Converted_OrderDate
FROM SUPERSTORE_SALES;

SELECT DATE_ADD('1899-12-30', INTERVAL SHIPDATE DAY) AS Converted_ShipDate
FROM SUPERSTORE_SALES;

-- DISABLE SAFE UPDATES
SET SQL_SAFE_UPDATES = 0;

-- CONVERT DATES
UPDATE SUPERSTORE_SALES
SET OrderDate = DATE_ADD('1899-12-30', INTERVAL OrderDate DAY);

UPDATE SUPERSTORE_SALES
SET ShipDate = DATE_ADD('1899-12-30', INTERVAL ShipDate DAY);

-- DATE CONVERSION IN '%d/%m/%y' FORMAT
UPDATE SUPERSTORE_SALES
SET ORDERDATE = STR_TO_DATE(ORDERDATE, '%d/%m/%y');


UPDATE SUPERSTORE_SALES
SET SHIPDATE = STR_TO_DATE(SHIPDATE, '%d/%m/%y');

SELECT
	MONTHNAME(MAX(ORDERDATE)) AS LAST_ORDER_MONTH,
    MAX(ORDERDATE) AS LAST_ORDER_DATE
FROM SUPERSTORE_SALES;retail


-- CHECKING FOR DUPLICATE CUSTOMERS
SELECT 
	CUSTOMERID, COUNT(*)
FROM superstore.SUPERSTORE_SALES
GROUP BY CUSTOMERID
ORDER BY 2 DESC;

-- CHECKING FOR INVALID ORDER QUANTITY
SELECT
	ROWID, QUANTITYORDERED
FROM SUPERSTORE_SALES
ORDER BY QUANTITYORDERED
LIMIT 10;

-- CHECKING FOR INVALID UNIT PRICE
SELECT
	ROWID, UNITPRICE
FROM SUPERSTORE_SALES
ORDER BY UNITPRICE
LIMIT 10;


SELECT
	*
FROM SUPERSTORE_SALES
WHERE CUSTOMERID = "1193";

/* RFM Segmentation: 
Segment the Customers based on their Recency (R), Frequency (F) & Monetary (M) Score
*/

CREATE OR REPLACE VIEW RFM_SCORE_DATA AS
WITH CUSTOMER_AGGREGATED_DATA AS
(SELECT
	CUSTOMERNAME,
    DATEDIFF((SELECT MAX(ORDERDATE) FROM SUPERSTORE_SALES), MAX(ORDERDATE)) AS RECENCY_VALUE,
    COUNT(DISTINCT ORDERID) AS FREQUENCY_VALUE,
    ROUND(SUM(SALES),0) AS MONETARY_VALUE
FROM SUPERSTORE_SALES
GROUP BY CUSTOMERNAME),

RFM_SCORE AS
(SELECT 
	C.*,
    NTILE(4) OVER (ORDER BY RECENCY_VALUE DESC) AS R_SCORE,
    NTILE(4) OVER (ORDER BY FREQUENCY_VALUE ASC) AS F_SCORE,
    NTILE(4) OVER (ORDER BY MONETARY_VALUE ASC) AS M_SCORE
FROM CUSTOMER_AGGREGATED_DATA AS C)

SELECT
	R.CUSTOMERNAME,
    R.RECENCY_VALUE,
    R_SCORE,
    R.FREQUENCY_VALUE,
    F_SCORE,
    R.MONETARY_VALUE,
    M_SCORE,
    (R_SCORE + F_SCORE + M_SCORE) AS TOTAL_RFM_SCORE,
    CONCAT_WS('', R_SCORE, F_SCORE, M_SCORE) AS RFM_SCORE_COMBINATION
FROM RFM_SCORE AS R;


-- CHECKING COMBINATIONS
SELECT * FROM RFM_SCORE_DATA WHERE RFM_SCORE_COMBINATION = '111';
SELECT * FROM RFM_SCORE_DATA WHERE RFM_SCORE_COMBINATION = '222';
SELECT * FROM RFM_SCORE_DATA WHERE RFM_SCORE_COMBINATION = '333';
SELECT * FROM RFM_SCORE_DATA WHERE RFM_SCORE_COMBINATION = '444';


-- CHECKING ONLY RFM SCORE OF CUSTOMERS
SELECT CUSTOMERNAME, RFM_SCORE_COMBINATION FROM RFM_SCORE_DATA;


-- CREATING CUSTOMER SEGMENTS
CREATE OR REPLACE VIEW RFM_ANALYSIS AS
SELECT 
    RFM_SCORE_DATA.*,
    CASE
        WHEN RFM_SCORE_COMBINATION IN (111, 112, 121, 132, 211, 211, 212, 114, 141) THEN 'CHURNED CUSTOMER'
        WHEN RFM_SCORE_COMBINATION IN (133, 134, 143, 224, 334, 343, 344, 144) THEN 'SLIPPING AWAY, CANNOT LOSE'
        WHEN RFM_SCORE_COMBINATION IN (311, 411, 331) THEN 'NEW CUSTOMERS'
        WHEN RFM_SCORE_COMBINATION IN (222, 231, 221,  223, 233, 322) THEN 'POTENTIAL CHURNERS'
        WHEN RFM_SCORE_COMBINATION IN (323, 333,321, 341, 422, 332, 432) THEN 'ACTIVE'
        WHEN RFM_SCORE_COMBINATION IN (433, 434, 443, 444) THEN 'LOYAL'
    ELSE 'Other'
    END AS CUSTOMER_SEGMENT
FROM RFM_SCORE_DATA;


-- SEGMENTWISE CUSTOMERS AND THEIR AVERAGE MONETARY VALUE
SELECT
	CUSTOMER_SEGMENT,
    COUNT(*) AS NUMBER_OF_CUSTOMERS,
    ROUND(AVG(MONETARY_VALUE),0) AS AVERAGE_MONETARY_VALUE
FROM RFM_ANALYSIS
GROUP BY CUSTOMER_SEGMENT;




